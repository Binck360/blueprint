// Copyright 2016 Palantir Technologies, Inc. All rights reserved.
// Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
// of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
// and https://github.com/palantir/blueprint/blob/master/PATENTS

@import "../../core/src/common/variables";

/*
Date range input

@react-example DateRangeInputExample

Styleguide components.datetime.daterangeinput
*/

.pt-daterangeinput {
  position: relative;
}

.pt-daterangeinput-field {
  // fields with an intent need to be visually above other fields, so their
  // entire border will be colored
  &[class*="pt-intent-"] {
    z-index: 1;
  }

  // this style exists for default .pt-control-groups already, but we restate it
  // here to decouple that stylesheet from this one.
  &:focus {
    z-index: 2;
  }
}

.pt-daterangeinput-trigger {

  // .pt-input-group already styles immediate-children .pt-buttons with
  // these position styles. however, the .pt-button is a grandchild of the
  // .pt-input-group in this case, so we need to restate the styles here.
  .pt-button {
    position: absolute;
    top: 0;

    // .pt-control-group styles .pt-button with position: relative when the
    // button gains focus. that causes the button to move down on click in this
    // case, so we disable that behavior.
    &:focus {
      position: absolute;
    }
  }

  // we're applying the .pt-input class to a div here, not a proper <input>. the
  // .pt-button above is the only child and is absolutely positioned, so we need
  // to explicitly specify the size of the .pt-input (to be a square). we also
  // need to clear its padding, as that's not relevant here.
  .pt-input {
    width: $pt-input-height;
    height: $pt-input-height;
    padding: 0;
  }
}

// react-day-picker does not conform to our naming scheme
// stylelint-disable selector-class-pattern

// warning: tricky case/explanation ahead. when one input field has a selected
// date in it, then being focused in the other input field will edit the other
// boundary on click. this is tricky if allowSingleDayRange is disabled:
// clicking on the same date will clear the value from the other field and put
// it into the current field, effectively swapping the date boundary. we want
// the hover state to show this clearly. fortunately that boils down to simply
// tweaking some border radii.
.pt-daterangeinput-popover:not(.pt-daterangeinput-allowsingledayrange) .pt-daterangepicker {
  .DayPicker-Day--selected-range-end.DayPicker-Day--hovered-range-start {
    border-top-left-radius: $pt-border-radius;
    border-bottom-left-radius: $pt-border-radius;
  }

  .DayPicker-Day--selected-range-start.DayPicker-Day--hovered-range-end {
    border-top-right-radius: $pt-border-radius;
    border-bottom-right-radius: $pt-border-radius;
  }
}

// stylelint-enable selector-class-pattern
